import { ManageTaskKeyboardOptions, manageTaskButtons } from '../../../../helpers/keyboard'
import { Action } from '../../../../types/actions'
import { Optional, Role, TaskProgress, TaskQueue } from '../../../../types/models'
import { TaskData } from '../common-individual-single'

export const keyboard = (
  data: TaskData,
  progress: Optional<TaskProgress | TaskQueue>,
  options: ManageTaskKeyboardOptions
) => {
  if (progress === TaskProgress.done) {
    return manageTaskButtons(data, options, {})
  }

  const buttons: Record<string, Action> = {}

  // –ª–∏–¥–µ—Ä
  if (options.role === Role.leader) {
    buttons['üì¢ –ø–æ–∑–≤–∞—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏'] = Action.call_waiting_members
  }

  // –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç
  if (!progress) {
    buttons['—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'] = Action.single_task_doing
    buttons['—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å'] = Action.single_task_wait
  }

  // –≤ –æ—á–µ—Ä–µ–¥–∏
  if (progress === TaskQueue.wait) {
    buttons['—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'] = Action.single_task_doing
    buttons['–≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏'] = Action.single_task_cancel
  }

  // —É—á–∞—Å—Ç–≤—É–µ—Ç
  if (progress === TaskProgress.doing) {
    buttons['–≤—ã–ø–æ–ª–Ω–µ–Ω–∞'] = Action.single_task_done
    buttons['–ø–µ—Ä–µ–¥—É–º–∞–ª'] = Action.single_task_cancel
  }

  return manageTaskButtons(data, options, buttons)
}
