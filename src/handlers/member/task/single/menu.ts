import { manageTaskButtons, ManageTaskKeyboardOptions } from '../../../../helpers/keyboard'
import { MessageMenu } from '../../../../helpers/reply/update-message'
import { CommunityType, TaskInfo, TaskProgress, TaskQueue } from '../../../../types/models'
import { TaskData } from '../common-individual-single'
import { taskHeader } from '../common-individual-single/task-header'
import { keyboard } from './keyboard'

const action = (progress: TaskInfo['progress']): string => {
  switch (progress) {
    case TaskProgress.doing:
      return '‚úÖ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ'
    case TaskQueue.wait:
      return 'üïì –≤—ã –∂–¥—ë—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏'
  }
  return '‚ùå –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ'
}

const status = (task: TaskInfo): string => {
  if (task.done) {
    return '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
  }

  if (task.closed) {
    return '–æ—Ç–º–µ–Ω–µ–Ω–æ'
  }

  const doing = (
    (task.required === 1) ?
      (
        (task.doing > 0) ?
          `—É–∂–µ –∑–∞–Ω—è—Ç–æ, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ${task.doing}` :
          '—Å–≤–æ–±–æ–¥–Ω–æ'
      ) :
      `—É—á–∞—Å—Ç–≤—É—é—Ç ${task.doing} –∏–∑ ${task.required}`
  )

  const wait = (
    task.wait ?
      `, –≤ –æ—á–µ—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ${task.wait}` :
      ''
  )

  return doing + wait + '\n' + action(task.progress)
}

export const singleTaskMenu = async (
  task: TaskInfo,
  data: TaskData,
  options: ManageTaskKeyboardOptions
): Promise<MessageMenu> => ({
  text: taskHeader(task) + (options.communityType === CommunityType.union ? status(task) : ''),
  keyboard: !task.closed && options.communityType === CommunityType.union ? 
    keyboard(data, task.progress, options) :
    manageTaskButtons(data, options)
})
